# CI Pipeline - Sistema de Análise Logística
# Executa testes e validações automaticamente a cada push

name: 🧪 Continuous Integration

# Quando executar
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Configurações globais
env:
  NODE_VERSION: '18'
  SKIP_ENV_VALIDATION: true

jobs:
  # Job 1: Testes de Qualidade de Código
  code-quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      # 1. Baixar código do repositório
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # 2. Configurar Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 3. Instalar dependências
      - name: 📦 Install dependencies
        run: npm ci

      # 4. Verificar formatação do código
      - name: 🎨 Check code formatting
        run: npm run format:check

      # 5. Executar linting
      - name: 🔍 Run ESLint
        run: npm run lint

      # 6. Verificar tipos TypeScript
      - name: 🔷 TypeScript check
        run: npm run typecheck

  # Job 2: Build da Aplicação
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      # 1. Baixar código
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # 2. Configurar Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 3. Instalar dependências
      - name: 📦 Install dependencies
        run: npm ci

      # 4. Gerar cliente Prisma
      - name: 🗄️ Generate Prisma client
        run: npx prisma generate

      # 5. Tentar fazer build da aplicação
      - name: 🏗️ Build application
        run: npm run build
        env:
          # Variáveis de ambiente fictícias para o build
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          NEXT_PUBLIC_SUPABASE_URL: "https://test.supabase.co"
          NEXT_PUBLIC_SUPABASE_ANON_KEY: "test-key"
          SUPABASE_SERVICE_ROLE_KEY: "test-service-key"

      # 6. Verificar se os arquivos de build foram criados
      - name: ✅ Verify build output
        run: |
          if [ ! -d ".next" ]; then
            echo "❌ Build failed - .next directory not found"
            exit 1
          fi
          echo "✅ Build successful - .next directory created"

  # Job 3: Testes Unitários (quando implementarmos)
  tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      # 1. Baixar código
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # 2. Configurar Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 3. Instalar dependências
      - name: 📦 Install dependencies
        run: npm ci

      # 4. Gerar cliente Prisma
      - name: 🗄️ Generate Prisma client
        run: npx prisma generate

      # 5. Executar testes (por enquanto só verifica se não há erros críticos)
      - name: 🧪 Run basic tests
        run: |
          echo "🧪 Running basic application tests..."
          
          # Verificar se arquivos essenciais existem
          if [ ! -f "src/app/page.tsx" ] && [ ! -f "src/app/layout.tsx" ]; then
            echo "❌ Essential app files missing"
            exit 1
          fi
          
          # Verificar se configurações estão corretas
          if [ ! -f "next.config.js" ]; then
            echo "❌ Next.js config missing"
            exit 1
          fi
          
          if [ ! -f "prisma/schema.prisma" ]; then
            echo "❌ Prisma schema missing"
            exit 1
          fi
          
          echo "✅ Basic tests passed"

  # Job 4: Análise de Segurança (opcional)
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      # 1. Baixar código
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # 2. Configurar Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 3. Instalar dependências
      - name: 📦 Install dependencies
        run: npm ci

      # 4. Executar auditoria de segurança
      - name: 🔒 Run security audit
        run: npm audit --audit-level=high

  # Job 5: Resumo dos Resultados
  summary:
    name: 📊 CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, build, tests, security]
    if: always()
    
    steps:
      - name: 📊 Display results
        run: |
          echo "🎉 CI Pipeline completed!"
          echo "✅ Code Quality: ${{ needs.code-quality.result }}"
          echo "✅ Build: ${{ needs.build.result }}"
          echo "✅ Tests: ${{ needs.tests.result }}"
          echo "✅ Security: ${{ needs.security.result }}"
          
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.tests.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" ]]; then
            echo "🎉 All checks passed! Code is ready for deployment."
          else
            echo "❌ Some checks failed. Please review the logs above."
            exit 1
          fi