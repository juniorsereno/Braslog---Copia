#!/bin/bash

# Script para ambiente de produ√ß√£o com Docker
# Uso: ./scripts/docker-prod.sh [up|down|logs|rebuild|deploy]

set -e

COMMAND=${1:-up}

case $COMMAND in
  up)
    echo "üöÄ Iniciando ambiente de produ√ß√£o..."
    docker-compose --profile production up -d
    echo "‚úÖ Ambiente iniciado!"
    echo "üåê Aplica√ß√£o: http://localhost:3000"
    echo "üåê Nginx: http://localhost:80"
    ;;
  down)
    echo "üõë Parando ambiente de produ√ß√£o..."
    docker-compose --profile production down
    echo "‚úÖ Ambiente parado!"
    ;;
  logs)
    echo "üìã Mostrando logs do ambiente de produ√ß√£o..."
    docker-compose --profile production logs -f
    ;;
  rebuild)
    echo "üîÑ Reconstruindo ambiente de produ√ß√£o..."
    docker-compose --profile production down
    docker-compose --profile production build --no-cache
    docker-compose --profile production up -d
    echo "‚úÖ Ambiente reconstru√≠do e iniciado!"
    ;;
  deploy)
    echo "üöÄ Fazendo deploy para produ√ß√£o..."
    
    # Build da imagem
    docker build -t braslog:latest .
    
    # Parar containers antigos
    docker-compose down
    
    # Iniciar novos containers
    docker-compose --profile production up -d
    
    # Aguardar aplica√ß√£o ficar pronta
    echo "‚è≥ Aguardando aplica√ß√£o ficar pronta..."
    sleep 10
    
    # Verificar sa√∫de da aplica√ß√£o
    if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
      echo "‚úÖ Deploy realizado com sucesso!"
    else
      echo "‚ùå Falha no deploy - aplica√ß√£o n√£o est√° respondendo"
      exit 1
    fi
    ;;
  *)
    echo "‚ùå Comando inv√°lido. Use: up, down, logs, rebuild, ou deploy"
    exit 1
    ;;
esac